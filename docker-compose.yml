# Docker Compose para ambiente de desenvolvimento
#
# Este arquivo define todos os serviços necessários para executar
# a aplicação: PHP/Lumen, MySQL, MongoDB, Redis e phpMyAdmin.

version: "3.8"

services:
  # Gerador de certificados SSL
  ssl-generator:
    build:
      context: ./ssl
      dockerfile: Dockerfile.ssl
    container_name: ssl-generator
    volumes:
      - ./ssl:/ssl/output
    command: sh -c "./generate-ssl.sh && cp *.pem /ssl/output/ && tail -f /dev/null"

  # Aplicação PHP/Lumen
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: task-management-app
    restart: unless-stopped
    expose:
      - "80"
    volumes:
      - .:/var/www/html
      - ./storage:/var/www/html/storage
    environment:
      - APP_ENV=local
      - APP_DEBUG=true
      - DB_HOST=mysql
      - DB_DATABASE=task_management
      - DB_USERNAME=task_app_user
      - DB_PASSWORD=secure_password_123
      - MONGODB_HOST=mongodb
      - MONGODB_DATABASE=task_logs
      - MONGODB_USERNAME=task_app_user
      - MONGODB_PASSWORD=secure_password_123
      - REDIS_HOST=redis
      - CACHE_DRIVER=redis
      - QUEUE_CONNECTION=redis
    depends_on:
      - mysql
      - mongodb
      - redis
    networks:
      - task-management-network

  # Nginx para desenvolvimento
  nginx:
    image: nginx:alpine
    container_name: task-management-nginx
    restart: unless-stopped
    ports:
      - "8000:80"
      - "8443:443"
    volumes:
      - ./docker/nginx/nginx-dev.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl:ro
      - .:/var/www/html
    depends_on:
      - app
      - ssl-generator
    networks:
      - task-management-network

  # Banco de dados MySQL para tarefas
  mysql:
    image: mysql:8.0
    container_name: task-management-mysql
    restart: unless-stopped
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root_password_123}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-task_management}
      MYSQL_USER: ${MYSQL_USER:-task_app_user}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-secure_password_123}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/mysql/init:/docker-entrypoint-initdb.d
    command: --default-authentication-plugin=mysql_native_password
    networks:
      - task-management-network

  # Banco de dados MongoDB para logs
  mongodb:
    image: mongo:7.0
    container_name: task-management-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD:-admin_password_123}
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE:-task_logs}
    volumes:
      - mongodb_data:/data/db
      - ./docker/mongodb/init:/docker-entrypoint-initdb.d
    networks:
      - task-management-network

  # Redis para cache e filas
  redis:
    image: redis:7.2-alpine
    container_name: task-management-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes ${REDIS_PASSWORD:+--requirepass $REDIS_PASSWORD}
    networks:
      - task-management-network

  # phpMyAdmin para gerenciamento do MySQL
  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    container_name: task-management-phpmyadmin
    restart: unless-stopped
    ports:
      - "8080:80"
    environment:
      PMA_HOST: mysql
      PMA_PORT: 3306
      PMA_USER: task_app_user
      PMA_PASSWORD: secure_password_123
      MYSQL_ROOT_PASSWORD: root_password_123
    depends_on:
      - mysql
    networks:
      - task-management-network

  # MongoDB Express para gerenciamento do MongoDB
  mongo-express:
    image: mongo-express:latest
    container_name: task-management-mongo-express
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: admin_password_123
      ME_CONFIG_MONGODB_URL: mongodb://admin:admin_password_123@mongodb:27017/
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: admin_password_123
    depends_on:
      - mongodb
    networks:
      - task-management-network

# Volumes para persistência de dados
volumes:
  mysql_data:
    driver: local
  mongodb_data:
    driver: local
  redis_data:
    driver: local

# Rede personalizada para comunicação entre containers
networks:
  task-management-network:
    driver: bridge
